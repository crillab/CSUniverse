### YamlMime:ManagedReference
items:
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  commentId: T:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  id: UniverseAssumption`1
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core
  children:
  - Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor(System.String,System.Boolean,`0)
  - Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue
  - Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual
  - Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString
  - Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId
  langs:
  - csharp
  - vb
  name: UniverseAssumption<T>
  nameWithType: UniverseAssumption<T>
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>
  type: Class
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: UniverseAssumption
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 25
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  summary: "\nThe UniverseAssumption represents an assumption made when solving constraint problem.\n"
  example: []
  syntax:
    content: public class UniverseAssumption<T>
    typeParameters:
    - id: T
      description: The type of the assumed value.
    content.vb: Public Class UniverseAssumption(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: UniverseAssumption(Of T)
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T)
  name.vb: UniverseAssumption(Of T)
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId
  commentId: P:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId
  id: VariableId
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  langs:
  - csharp
  - vb
  name: VariableId
  nameWithType: UniverseAssumption<T>.VariableId
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.VariableId
  type: Property
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: VariableId
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 30
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  summary: "\nThe variableId of the variable involved in this assumption.\n"
  example: []
  syntax:
    content: public string VariableId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VariableId As String
  overload: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId*
  nameWithType.vb: UniverseAssumption(Of T).VariableId
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).VariableId
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor(System.String,System.Boolean,`0)
  commentId: M:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor(System.String,System.Boolean,`0)
  id: '#ctor(System.String,System.Boolean,`0)'
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  langs:
  - csharp
  - vb
  name: UniverseAssumption(string, bool, T)
  nameWithType: UniverseAssumption<T>.UniverseAssumption(string, bool, T)
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.UniverseAssumption(string, bool, T)
  type: Constructor
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: .ctor
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 46
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  summary: "\nCreates a new UniverseAssumption.\n"
  example: []
  syntax:
    content: public UniverseAssumption(string variableId, bool equal, T value)
    parameters:
    - id: variableId
      type: System.String
      description: The variableId of the variable involved in this assumption.
    - id: equal
      type: System.Boolean
      description: Indicates if this assumption represents a equality or not.
    - id: value
      type: '{T}'
      description: The value of the variable in this assumption.
    content.vb: Public Sub New(variableId As String, equal As Boolean, value As T)
  overload: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor*
  nameWithType.vb: UniverseAssumption(Of T).New(String, Boolean, T)
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).New(String, Boolean, T)
  name.vb: New(String, Boolean, T)
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual
  commentId: M:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual
  id: IsEqual
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  langs:
  - csharp
  - vb
  name: IsEqual()
  nameWithType: UniverseAssumption<T>.IsEqual()
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.IsEqual()
  type: Method
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: IsEqual
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 56
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  summary: "\nGives the equal of this UniverseAssumption.\n"
  example: []
  syntax:
    content: public bool IsEqual()
    return:
      type: System.Boolean
      description: This UniverseAssumption&apos;s equal.
    content.vb: Public Function IsEqual() As Boolean
  overload: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual*
  nameWithType.vb: UniverseAssumption(Of T).IsEqual()
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).IsEqual()
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue
  commentId: M:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue
  id: GetValue
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  langs:
  - csharp
  - vb
  name: GetValue()
  nameWithType: UniverseAssumption<T>.GetValue()
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.GetValue()
  type: Method
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: GetValue
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 61
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  syntax:
    content: public T GetValue()
    return:
      type: '{T}'
    content.vb: Public Function GetValue() As T
  overload: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue*
  nameWithType.vb: UniverseAssumption(Of T).GetValue()
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).GetValue()
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString
  commentId: M:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString
  id: ToString
  parent: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: UniverseAssumption<T>.ToString()
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.ToString()
  type: Method
  source:
    remote:
      path: docfx_project/src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
      branch: main
      repo: https://gitlab.univ-artois.fr/cril-exakis-nelite-adp/softwares-tfa/cp/tootatis/csuniverse.git
    id: ToString
    path: src/Fr.UnivArtois.CRIL.CSUniverse/Core/UniverseAssumption.cs
    startLine: 66
  assemblies:
  - Fr.UnivArtois.CRIL.CSUniverse
  namespace: Fr.UnivArtois.CRIL.CSUniverse.Core
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString*
  nameWithType.vb: UniverseAssumption(Of T).ToString()
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).ToString()
references:
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core
  commentId: N:Fr.UnivArtois.CRIL.CSUniverse.Core
  name: Fr.UnivArtois.CRIL.CSUniverse.Core
  nameWithType: Fr.UnivArtois.CRIL.CSUniverse.Core
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core
  spec.csharp:
  - uid: Fr
    name: Fr
  - name: .
  - uid: Fr.UnivArtois
    name: UnivArtois
  - name: .
  - uid: Fr.UnivArtois.CRIL
    name: CRIL
  - name: .
  - uid: Fr.UnivArtois.CRIL.CSUniverse
    name: CSUniverse
  - name: .
  - uid: Fr.UnivArtois.CRIL.CSUniverse.Core
    name: Core
  spec.vb:
  - uid: Fr
    name: Fr
  - name: .
  - uid: Fr.UnivArtois
    name: UnivArtois
  - name: .
  - uid: Fr.UnivArtois.CRIL
    name: CRIL
  - name: .
  - uid: Fr.UnivArtois.CRIL.CSUniverse
    name: CSUniverse
  - name: .
  - uid: Fr.UnivArtois.CRIL.CSUniverse.Core
    name: Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId*
  commentId: Overload:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.VariableId
  name: VariableId
  nameWithType: UniverseAssumption<T>.VariableId
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.VariableId
  nameWithType.vb: UniverseAssumption(Of T).VariableId
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).VariableId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor*
  commentId: Overload:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.#ctor
  name: UniverseAssumption
  nameWithType: UniverseAssumption<T>.UniverseAssumption
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.UniverseAssumption
  nameWithType.vb: UniverseAssumption(Of T).New
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).New
  name.vb: New
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual*
  commentId: Overload:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.IsEqual
  name: IsEqual
  nameWithType: UniverseAssumption<T>.IsEqual
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.IsEqual
  nameWithType.vb: UniverseAssumption(Of T).IsEqual
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).IsEqual
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue*
  commentId: Overload:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.GetValue
  name: GetValue
  nameWithType: UniverseAssumption<T>.GetValue
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.GetValue
  nameWithType.vb: UniverseAssumption(Of T).GetValue
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).GetValue
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString*
  commentId: Overload:Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption`1.ToString
  name: ToString
  nameWithType: UniverseAssumption<T>.ToString
  fullName: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption<T>.ToString
  nameWithType.vb: UniverseAssumption(Of T).ToString
  fullName.vb: Fr.UnivArtois.CRIL.CSUniverse.Core.UniverseAssumption(Of T).ToString
